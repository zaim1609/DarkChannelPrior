# -*- coding: utf-8 -*-
"""ImageDehazeTry.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qCHd22x9mkA-rqa07XJ5pPkQHaG38jLN
"""

import cv2
import math
import numpy as np
import matplotlib.pyplot as plt

"""**Membuat** **function** **untuk** **menentukan** **darkChannel** """

def DarkChannel(im,sz):
  b,g,r = cv2.split(im)
  dc = cv2.min(cv2.min(r,g),b)
  kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(sz,sz))
  dark = cv2.erode(dc, kernel)
  return dark

"""**Mengambil gambar**"""

img = cv2.imread("/content/berta.jpg",1)
plt.imshow(img)

"""**Mengambil Dark Chennel Dari Sebuah Gambar**"""

img_out = DarkChannel(img,15)
plt.figure(figsize=(20,20))
plt.subplot(1,2,1)
plt.imshow(img,cmap="gray")
plt.subplot(1,2,2)
plt.imshow(img_out,cmap="gray")
plt.show()

"""**Cahaya Atmosfer (A)** adalah intensitas tertinggi yang diambil dari citra dark """

def AtmLight(im, dark):
  [h,w] = im.shape[:2]
  imsz = h * w
  numpx = int(max(math.floor(imsz / 1000), 1))
  darkvec = dark.reshape(imsz, 1)
  imvec = im.reshape(imsz, 3)

  indices = darkvec.argsort()
  indices = indices[imsz - numpx::]

  atmsum = np.zeros([1,3])
  for ind in range(1, numpx):
    atmsum = atmsum + imvec[indices[ind]]

  A = atmsum / numpx
  return A

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
A = AtmLight(img, img_out)

"""**Membuat peta Transmisi (t)**"""

def TransmissionEstimate(im,A,sz):
  omega = 0.95
  im3 = np.empty(im.shape, im.dtype)

  for ind in range(0,3):
    im3[:,:, ind] = im[:,:,ind] / A[0, ind]

  transmission = 1 - omega * DarkChannel(im3, sz)
  return transmission

"""**Implement**"""

img = cv2.imread("/content/berta.jpg")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img = img.astype('float64') / 255

dark = DarkChannel(img,15)
A = AtmLight(img, dark)
te = TransmissionEstimate(img, A, 15)

plt.figure(figsize=(20,20))
plt.subplot(1,2,1)
plt.imshow(img,cmap="gray")
plt.subplot(1,2,2)
plt.imshow(te,cmap="gray")
plt.show()

def Guidedfilter(im,p,r,eps):
    mean_I = cv2.boxFilter(im,cv2.CV_64F,(r,r));
    mean_p = cv2.boxFilter(p, cv2.CV_64F,(r,r));
    mean_Ip = cv2.boxFilter(im*p,cv2.CV_64F,(r,r));
    cov_Ip = mean_Ip - mean_I*mean_p;

    mean_II = cv2.boxFilter(im*im,cv2.CV_64F,(r,r));
    var_I   = mean_II - mean_I*mean_I;

    a = cov_Ip/(var_I + eps);
    b = mean_p - a*mean_I;

    mean_a = cv2.boxFilter(a,cv2.CV_64F,(r,r));
    mean_b = cv2.boxFilter(b,cv2.CV_64F,(r,r));

    q = mean_a*im + mean_b;
    return q;

"""**Perbaikan Kualitas Peta Transmisi**"""

def TransmissionRefine(im,et):
  gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
  gray = np.float64(gray) / 255
  r = 60
  eps = 0.0001
  t = Guidedfilter(gray,et,r,eps)
  return t

#imgOriginal = cv2.imread("/content/drive/MyDrive/data/kabut__odt.jpg")
imgOriginal = cv2.imread("/content/berta.jpg")
img = cv2.cvtColor(imgOriginal, cv2.COLOR_BGR2RGB)
img = img.astype('float64') / 255
dark = DarkChannel(img, 15)
A = AtmLight(img, dark)
te = TransmissionEstimate(img, A, 15)
t_refined = TransmissionRefine(imgOriginal, te)
plt.figure(figsize=(20, 20))
plt.subplot(1,2,1)
plt.imshow(img,cmap="gray")
plt.subplot(1,2,2)
plt.imshow(t_refined,cmap="gray")
plt.show()

def Recover(im,t,A,tx=0.1):
  res = np.empty(im.shape, im.dtype)
  t = cv2.max(t, tx)

  for ind in range(0,3):
    res[:,:,ind] = (im[:,:,ind] - A[0,ind]) / t + A[0,ind]
  return res

imgOriginal = cv2.imread("/content/berta.jpg")
img = cv2.cvtColor(imgOriginal, cv2.COLOR_BGR2RGB)
img = img.astype('float64') / 255
dark = DarkChannel(img, 15)
A = AtmLight(img, dark)
te = TransmissionEstimate(img, A, 15)
t_refined = TransmissionRefine(imgOriginal, te)
J = Recover(img, t_refined, A, 0.1)
plt.figure(figsize=(20, 20))
plt.subplot(1,2,1)
plt.imshow(img,cmap="gray")
plt.subplot(1,2,2)
plt.imshow(J,cmap="gray")
plt.show()